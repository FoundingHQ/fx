#!/usr/bin/env node
import { resolve } from "path";
import { Command } from "commander";
import { chalk, readJson, checkAndNotifyUpdates } from "@founding/devkit";
import { list } from "./commands/list";
import { add } from "./commands/add";
import { remove } from "./commands/remove";
import { bootstrap } from "./commands/bootstrap";

const program = new Command();
const packageJson = readJson(resolve(__dirname, "../package.json"));

async function main() {
  program
    .version(packageJson.version)
    .description(
      "CLI tool to add/remove prebuilt features to a Next.js project"
    );

  program
    .command("list")
    .description("list all available features to add")
    .allowUnknownOption()
    .action(list);

  program
    .command("add")
    .description("add a new feature to the project")
    .argument(
      "[feature]",
      `
  - an official feature generator (e.g. auth)
  - link to GitHub repository (e.g. "foundinghq/example-generator")
  - full url of a Github repository (e.g. "https://github.com/foundinghq/example-generator")
  - a local generator path (e.g. "./generators/example")

  if no feature is specified, the list of available features will be displayed.
    `
    )
    .argument(
      "[generatorProps...]",
      `
  a list of properties to pass to the generator. These come in the form of key=value pairs.
    `
    )
    .option(
      "-n, --dryrun",
      "print outputs of adding a feature without running the command"
    )
    .allowUnknownOption()
    .action(add);

  program
    .command("remove")
    .description("remove a feature from the project")
    .argument(
      "[feature]",
      `
  a feature you've previously added to the project that you now want to revert. Reverting a feature will remove all files generated by the feature but will not undo codemod changes.
    `
    )
    .option(
      "-n, --dryrun",
      "print outputs of removing a feature without running the command"
    )
    .allowUnknownOption()
    .action(remove);

  program
    .command("bootstrap")
    .description("bootstrap a new project with a preset")
    .argument(
      "[preset]",
      `
  presets act as sharable set of features that can be used to quickly get a project up and running.
    `
    )
    .option(
      "-n, --dryrun",
      "print outputs of bootstrapping a project without running the command"
    )
    .allowUnknownOption()
    .action(bootstrap);

  try {
    await program.parseAsync(process.argv);
    await checkAndNotifyUpdates(packageJson);
  } catch (reason: any) {
    console.log();
    console.log("Aborting installation.");
    if (reason.command) {
      console.log(`  ${chalk.cyan(reason.command)} command failed.`);
      if (reason.message) {
        console.log();
        console.log(`${chalk.red(reason.message)}`);
      }
    } else {
      console.log(chalk.red("Unexpected error. Please report it as a bug:"));
      console.log(reason);
    }

    await checkAndNotifyUpdates(packageJson);

    process.exit(1);
  }
}

main();
