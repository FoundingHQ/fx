#!/usr/bin/env node
import { Command } from "commander";
import { logger, checkAndNotifyUpdates } from "@founding/devkit";

import packageJson from "../package.json";
import { init } from "./commands/init";
import { list } from "./commands/list";
import { add } from "./commands/add";
import { remove } from "./commands/remove";
import { preset } from "./commands/preset";

const program = new Command();

const main = async () => {
  program
    .version(packageJson.version)
    .description(
      "CLI tool to add/remove prebuilt features to a Next.js project"
    )
    .showSuggestionAfterError();

  program
    .command("init")
    .description("Converts a project to be compatible with FX features")
    .option(
      "-n, --dry-run",
      "Print outputs of initializing without running the command"
    )
    .option(
      "-p, --path <path>",
      "Path to a custom generator to run for initializing"
    )
    .allowUnknownOption()
    .action(init);

  program
    .command("list")
    .description("List all available features to add")
    .allowUnknownOption()
    .action(list);

  program
    .command("add")
    .description("Add a new feature to the project")
    .argument(
      "[feature]",
      logger.withMeta(`Your Feature to could be:
- An official feature generator (e.g. auth)
- Link to GitHub repository (e.g. "foundinghq/example-generator")
- Full url of a Github repository (e.g. "https://github.com/foundinghq/example-generator")
- A local generator path (e.g. "./generators/example")

If no feature is specified, the list of available features will be displayed.\n`)
    )
    .argument(
      "[generatorProps...]",
      logger.withMeta(
        `A list of properties to pass to the generator. These come in the form of key=value pairs.`
      )
    )
    .option(
      "-n, --dry-run",
      "Print outputs of adding a feature without running the command"
    )
    .allowUnknownOption()
    .action(add);

  program
    .command("remove")
    .description("Remove a feature from the project")
    .argument(
      "[feature]",
      logger.withMeta(
        `A feature you've previously added to the project that you now want to revert. Reverting a feature will remove all files generated by the feature but will not undo codemod changes.`
      )
    )
    .option(
      "-n, --dry-run",
      "Print outputs of removing a feature without running the command"
    )
    .allowUnknownOption()
    .action(remove);

  program
    .command("preset")
    .description("Bootstrap a preset")
    .argument(
      "[preset]",
      logger.withMeta(
        `Presets act as sharable set of features that can be used to quickly get a project up and running.`
      )
    )
    .option(
      "-n, --dry-run",
      "Print outputs of executing a preset without running the command"
    )
    .allowUnknownOption()
    .action(preset);

  try {
    await program.parseAsync(process.argv);
    await checkAndNotifyUpdates(packageJson);
  } catch (reason: any) {
    logger.newLine();
    if (reason.command) {
      logger.error(`${logger.withCommand(reason.command)} command failed.`);
      if (reason.message) logger.error(reason.message);
    } else {
      logger.error("Unexpected error. Please report it as a bug:");
      console.error(reason);
    }

    await checkAndNotifyUpdates(packageJson);

    process.exit(1);
  }
};

main();
