// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?

  accounts     Account[]
  passwordHash String?

  customer     Customer?
  subscription Subscription?

  role   UserRole @default(USER)
  tokens Token[]

  lessons  Lesson[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

model Token {
  id          String    @id @default(cuid())
  hashedToken String
  type        TokenType
  expiresAt   DateTime?
  sentTo      String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([hashedToken, type])
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_PASSWORD
  RESET_PASSWORD
}

model Customer {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Product {
  id          String  @id @default(cuid())
  active      Boolean @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  prices      Price[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Price {
  id              String         @id @default(cuid())
  active          Boolean        @default(false)
  currency        String
  interval        PriceInterval?
  unitAmount      Int?
  intervalCount   Int?
  trialPeriodDays Int?
  type            PriceType?

  productId     String
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Subscription {
  id                String             @id @default(cuid())
  priceId           String
  status            SubscriptionStatus
  startDate         DateTime?
  endedAt           DateTime?
  trialEnd          DateTime?
  trialStart        DateTime?
  cancelAt          DateTime?
  cancelAtPeriodEnd Boolean?
  canceledAt        DateTime?
  metadata          Json?

  price Price @relation(fields: [priceId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}

model Lesson {
  id       String    @id @default(cuid())
  title    String
  slug     String
  stories  Story[]
  comments Comment[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Story {
  id      String    @id @default(cuid())
  type    StoryType
  content Json

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum StoryType {
  text
  image
  video
  audio
}

model Comment {
  id      String @id @default(cuid())
  content String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
