import { GetServerSidePropsContext } from "next";
import fetch from "cross-fetch";
import redaxios, { Options } from "redaxios";
import { dehydrate, QueryClient, QueryKey } from "react-query";

import { serializeCookie } from "./cookie";

export type { Options } from "redaxios";

const defaultOptions: Options = {
  withCredentials: true,
  baseURL: process.env.NEXT_PUBLIC_API_URL || "https://localhost:3000",
  fetch,
};

export const createFetcher = (options: Options = {}): typeof redaxios => {
  return redaxios.create({ ...defaultOptions, ...options });
};

export const fetcher = createFetcher();

type PrefetchQueries = [QueryKey, (options: Options) => Promise<any>][];

export const hydrateQueries = async (
  { req }: GetServerSidePropsContext,
  prefetch: PrefetchQueries = []
) => {
  const queryClient = new QueryClient();

  await Promise.all(
    prefetch.map(([queryKey, queryFn]) => {
      return queryClient.prefetchQuery(queryKey, () => {
        const options: Options = {};
        if (req.cookies && req.cookies.sid) {
          options.headers = {
            Cookie: serializeCookie("sid", req.cookies.sid),
          };
        }
        return queryFn(options);
      });
    })
  );

  return {
    queryClient,
    dehydratedState: dehydrate(queryClient),
  };
};
