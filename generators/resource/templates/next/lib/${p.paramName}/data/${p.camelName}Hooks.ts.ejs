import { GetServerSidePropsContext } from "next";
import { useMutation, useQuery, useQueryClient } from "react-query";
import { fetcher, hydrateQueries, Options } from "@util/fetcher";
import { Prisma } from "@prisma/client";
import { <%- p.pascalName %> } from "@lib/<%- p.paramName %>/data/<%- p.camelName %>Schema"

// Follows https://tkdodo.eu/blog/effective-react-query-keys
const queryKeys = {
  all: ["<%- p.apiName %>"],
  list: (filters?: Record<string, string>) => [
    ...queryKeys.all,
    "list",
    ...(filters ? [{ filters }] : []),
  ],
  detail: (id: string) => [...queryKeys.all, "detail", id],
};

export const get<%- p.pascalName %>List = async (options?: Options) => {
  const { data } = await fetcher.get<{ list: <%- p.pascalName %>[] }>("/api/<%- p.apiName %>", options);
  return data;
};

export const use<%- p.pascalName %>List = (filters?: Record<string, string>) => {
  return useQuery(queryKeys.list(filters), () =>
    get<%- p.pascalName %>List({
      params: filters,
    })
  );
};

export const hydrate<%- p.pascalName %>List = async (context: GetServerSidePropsContext) => {
  const queryKey = queryKeys.list();
  const { dehydratedState } = await hydrateQueries(context, [
    [queryKey, get<%- p.pascalName %>List],
  ]);

  return {
    props: {
      dehydratedState,
    },
  };
};

export const get<%- p.pascalName %> = async (input: <%- p.idTypeName %>, options?: Options) => {
  const { data } = await fetcher.get<<%- p.pascalName %>>(`/api/<%- p.apiName %>/${input.id}`, options);
  return data;
};

export const use<%- p.pascalName %> = (input: <%- p.idTypeName %>) => {
  return useQuery(queryKeys.detail(input.id), () => get<%- p.pascalName %>(input), {
    enabled: Boolean(input.id),
  });
};

export const create<%- p.pascalName %> = async (
  input: Prisma.<%- p.pascalName %>CreateInput,
  options?: Options
) => {
  const { data } = await fetcher.post<<%- p.pascalName %>>("/api/<%- p.apiName %>", input, options);
  return data;
};

export const use<%- p.pascalName %>Create = () => {
  const queryClient = useQueryClient();
  return useMutation(create<%- p.pascalName %>, {
    onSuccess: (data) => {
      queryClient.setQueryData(queryKeys.detail(data.id), data);
      queryClient.invalidateQueries(queryKeys.list());
    },
  });
};

export const update<%- p.pascalName %> = async (
  input: <%- p.idTypeName %> & Prisma.<%- p.pascalName %>UpdateInput,
  options?: Options
) => {
  const { data } = await fetcher.put<<%- p.pascalName %>>(
    `/api/<%- p.apiName %>/${input.id}`,
    input,
    options
  );
  return data;
};

export const use<%- p.pascalName %>Update = () => {
  const queryClient = useQueryClient();
  return useMutation(update<%- p.pascalName %>, {
    onSuccess: (data) => {
      queryClient.setQueryData(queryKeys.detail(data.id), data);
      queryClient.invalidateQueries(queryKeys.list());
    },
  });
};

export const delete<%- p.pascalName %> = async (
  input: <%- p.idTypeName %>,
  options?: Options
) => {
  const { data } = await fetcher.delete<<%- p.pascalName %>>(
    `/api/<%- p.apiName %>/${input.id}`,
    options
  );
  return data;
};

export const use<%- p.pascalName %>Delete = () => {
  const queryClient = useQueryClient();
  return useMutation(delete<%- p.pascalName %>, {
    onSuccess: (data) => {
      queryClient.removeQueries(queryKeys.detail(data.id));
      queryClient.invalidateQueries(queryKeys.list());
    },
  });
};
