import {
  use<%- p.pascalName %>,
  use<%- p.pascalName %>Create,
  use<%- p.pascalName %>Update,
  use<%- p.pascalName %>Delete,
} from "@lib/<%- p.paramName %>/data/<%- p.camelName %>Hooks";
import { <%- p.pascalName %> } from "@prisma/client";

type Props = {
  id?: <%- p.pascalName %>["id"];
};

export const <%- p.pascalName %>Form = ({ id }: Props) => {
  const { data } = use<%- p.pascalName %>({ id: id || "" });
  const { mutate: create } = use<%- p.pascalName %>Create();
  const { mutate: update } = use<%- p.pascalName %>Update();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const data = new FormData(e.target as HTMLFormElement);
    const input = Object.fromEntries(data.entries()) as <%- p.pascalName %>;
    const action = data ? update : create;
    try {
      await action(input);
    } catch (error) {
      console.error(error);
    }
  };

  const handleDelete = () => {
    if (data) remove(data);
  };

  return (
    <form onSubmit={handleSubmit}>
      <% Object.values(props.attributes).forEach((attr) => { %>
        <input
          name="<%- attr.name %>"
          type="text"
          placeholder="<%- p.pascalName %> <%- attr.camelName %>"
          defaultValue={data?.<%- attr.camelName %> || ""}
        />
      <% }) %>
      <button type="submit">{data ? "update" : "create"}</button>
      {data && (
        <button type="button" onClick={handleDelete}>
          delete
        </button>
      )}
    </form>
  );
};

export default <%- p.pascalName %>Form;
