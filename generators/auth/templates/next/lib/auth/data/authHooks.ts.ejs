import { GetServerSidePropsContext } from "next";
import { useRouter } from "next/router";
import { useQueryClient, useQuery, useMutation, QueryKey } from "react-query";
import { fetcher, hydrateQueries, Options } from "@util/fetcher";
import { authRoutes } from "@lib/auth/api/authConfig";
import { Session, AuthInput } from "@lib/auth/data/authSchema";

export const sessionKey: QueryKey = ["session"];

export const getSession = async (options?: Options) => {
  const { data } = await fetcher.get<Session>(authRoutes.session, options);
  return data;
};

export const useSession = () => {
  return useQuery(sessionKey, () => getSession());
};

export const hydrateSession = async (context: GetServerSidePropsContext) => {
  const { queryClient, dehydratedState } = await hydrateQueries(context, [
    [sessionKey, getSession],
  ]);

  return {
    queryClient,
    dehydratedState,
    sessionKey,
  };
};

const useHandleAuth = (redirectRoute = "/") => {
  const router = useRouter();
  const queryClient = useQueryClient();

  const handleAuth = (session: Session) => {
    queryClient.setQueryData(sessionKey, session);
    queryClient.invalidateQueries();
    router.push(redirectRoute);
  };

  return handleAuth;
};

export const login = async (input: AuthInput) => {
  const { data } = await fetcher.post<Session>(authRoutes.login, input);
  return data;
};

export const useLogin = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(login, { onSuccess: handleAuth });
};

export const signup = async (input: AuthInput) => {
  const { data } = await fetcher.post<Session>(authRoutes.signup, input);
  return data;
};

export const useSignup = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(signup, { onSuccess: handleAuth });
};

export const logout = async () => {
  const { data } = await fetcher.post<Session>(authRoutes.logout);
  return data;
};

export const useLogout = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(logout, { onSuccess: handleAuth });
};

export const requestReset = async (input: Pick<AuthInput, "email">) => {
  const { data } = await fetcher.post<Session>(authRoutes.requestReset, input);
  return data;
};

export const useRequestReset = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(requestReset, { onSuccess: handleAuth });
};

export const confirmReset = async (input: Pick<AuthInput, "password">) => {
  const { data } = await fetcher.post<Session>(authRoutes.confirmReset, input);
  return data;
};

export const useConfirmReset = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(confirmReset, { onSuccess: handleAuth });
};
