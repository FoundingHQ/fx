import { GetServerSidePropsContext } from "next";
import { useRouter } from "next/router";
import { useQueryClient, useQuery, useMutation, QueryKey } from "react-query";
import { fetcher, hydrateQueries } from "@util/fetcher";
import { authRoutes } from "@lib/auth/api/authConfig";
import { Session } from "@lib/auth/data/authSchema";

export const sessionKey: QueryKey = "session";

export const getSession = async (config = {}) => {
  const { data } = await fetcher.get<Session>(authRoutes.session, config);
  return data;
};

export const useSession = () => {
  return useQuery(sessionKey, getSession);
};

export const hydrateSession = (context: GetServerSidePropsContext) => {
  return hydrateQueries(context, [[sessionKey, getSession]]);
};

const useHandleAuth = (redirectRoute = "/", shouldInvalidate = false) => {
  const router = useRouter();
  const queryClient = useQueryClient();

  const handleAuth = ({ accessToken, user }: Session) => {
    queryClient.setQueryData(sessionKey, { user, accessToken });
    if (shouldInvalidate) {
      queryClient.invalidateQueries();
    }
    router.push(redirectRoute);
  };

  return handleAuth;
};

export type AuthInput = { email: string; password: string };

export const login = async (input: AuthInput) => {
  const { data } = await fetcher.post<Session>(authRoutes.login, input);
  return data;
};

export const useLogin = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(login, { onSuccess: handleAuth });
};

export const signup = async (input: AuthInput) => {
  const { data } = await fetcher.post<Session>(authRoutes.signup, input);
  return data;
};

export const useSignup = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath);
  return useMutation(signup, { onSuccess: handleAuth });
};

export const logout = async () => {
  const { data } = await fetcher.post<Session>(authRoutes.logout);
  return data;
};

export const useLogout = (redirectPath = "/") => {
  const handleAuth = useHandleAuth(redirectPath, true);
  return useMutation(logout, { onSuccess: handleAuth });
};
